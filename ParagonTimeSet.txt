let stateText = $('#ccp-current-state-text'),
    Available = $('#ccp-state-Available'),
    onBreak = $('#ccp-state-Break'),
    atLunch = $('#ccp-state-Lunch'),
    inAmeeting = $('#ccp-state-Meeting'),
    offLine = $('#ccp-state-Offline');

function ParagonTimeSet() {

    let current = new Date(),
        Hour = current.getHours(),
        Minute = current.getMinutes();

    switch (Hour) {
	 case 8:
            if (Minute >= 0 && Minute <= 10) {
                setTimeout(async() => {
                    stateText.click()
                    setTimeout(async() => { Available.click() }, 300)
                }, 50);
            };
            setTimeout(3000000); 
            break;


        case 15:
            if (Minute >= 15 && Minute <= 20) {
                setTimeout(async() => {
                    stateText.click()
                    setTimeout(async() => { atLunch.click() }, 50)
                    setTimeout(async() => { onBreak.click() }, 3600000)
                }, 300);
            };
            break;

        case 16:
            if (Minute >= 45 && Minute <= 50) {
                setTimeout(async() => {
                    stateText.click()
                    setTimeout(async() => {inAmeeting.click() }, 100)
                }, 300);
            };
            break;


        case 17:
            if (Minute >= 0 && Minute <= 5) {
                setTimeout(async() => {
                    stateText.click()
                    setTimeout(async() => { offLine.click() }, 50)
                }, 300);
            };
            break;

        default:break;
    };
}

ParagonTimeSet() 

let SetTimeID = setInterval(ParagonTimeSet, 600000)

setTimeout(() => {
    clearInterval(SetTimeID);
}, 32400000)

// ChatGPT 优化版：
// Cache jQuery selectors for performance and readability
const stateSelectors = {
    Available: $('#ccp-state-Available'),
    Break: $('#ccp-state-Break'),
    Lunch: $('#ccp-state-Lunch'),
    Meeting: $('#ccp-state-Meeting'),
    Offline: $('#ccp-state-Offline')
};

// Function to simulate click with delay
function simulateClick(selector, delay = 0) {
    setTimeout(() => {
        selector.click();
    }, delay);
}

// Main function to set state based on time
function setStateBasedOnTime() {
    const currentTime = new Date();
    const hour = currentTime.getHours();
    const minute = currentTime.getMinutes();

    // Click the state text to initiate state change
    simulateClick($('#ccp-current-state-text'), 50);

    // Determine state based on current time and simulate clicks accordingly
    if (hour === 8 && minute >= 0 && minute <= 10) {
        simulateClick(stateSelectors.Available, 350); // Delay accounts for initial click
    } else if (hour === 15 && minute >= 15 && minute <= 20) {
        simulateClick(stateSelectors.Lunch, 350);
        // Assuming you meant to set a delay for the 'onBreak' click after 'atLunch'
        simulateClick(stateSelectors.Break, 360350); // Adjusted to include initial delay
    } else if (hour === 16 && minute >= 45 && minute <= 50) {
        simulateClick(stateSelectors.Meeting, 350);
    } else if (hour === 17 && minute >= 0 && minute <= 5) {
        simulateClick(stateSelectors.Offline, 350);
    }
    // No need for default case if no action is required
}

// Initialize the state setting process and set an interval
setStateBasedOnTime();
let setTimeID = setInterval(setStateBasedOnTime, 600000); // Refresh every 10 minutes

// Stop the interval after 9 hours
setTimeout(() => {
    clearInterval(setTimeID);
}, 32400000); // 9 hours in milliseconds

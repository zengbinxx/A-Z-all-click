// Change AUX start and off work.
const stateSelectors = {
    Available: $('#ccp-state-Available'),
    Break: $('#ccp-state-Break'),
    Lunch: $('#ccp-state-Lunch'),
    Meeting: $('#ccp-state-Meeting'),
    Offline: $('#ccp-state-Offline')
};

// Function to simulate click with no delay
function simulateClick(selector) {
    selector.click();
}

// Calculate the delay until a specific hour (24-hour format)
function calculateDelayUntil(hour) {
    const now = new Date();
    let targetTime = new Date(now);
    targetTime.setHours(hour, 0, 0, 0); // Set target time to the specified hour

    // Adjust to the next day if the target time has already passed
    if (now > targetTime) {
        targetTime.setDate(targetTime.getDate() + 1);
    }

    return targetTime - now; // Return the delay in milliseconds
}

// Function to set state based on the time of day
function setStateByTimeOfDay() {
    const delayUntilAvailable = calculateDelayUntil(8); // 8 AM
    const delayUntilOffline = calculateDelayUntil(17); // 5 PM

    // Set the state to 'Available' at 8 AM
    setTimeout(() => {
        simulateClick(stateSelectors.Available);
    }, delayUntilAvailable);

    // Set the state to 'Offline' at 5 PM
    setTimeout(() => {
        simulateClick(stateSelectors.Offline);
    }, delayUntilOffline);
}

// Initialize the state setting process
setStateByTimeOfDay();


// 1h lunch
const stateSelectors = {
    Available: $('#ccp-state-Available'),
    Break: $('#ccp-state-Break'),
    Lunch: $('#ccp-state-Lunch'),
    Meeting: $('#ccp-state-Meeting'),
    Offline: $('#ccp-state-Offline')
};

// Function to simulate click with no delay
function simulateClick(selector) {
    selector.click();
}

// Set current state to Lunch and schedule change to Available after 1 hour
function setLunchThenAvailable() {
    simulateClick(stateSelectors.Lunch); // Set state to Lunch
    setTimeout(() => {
        simulateClick(stateSelectors.Available); // Change state to Available after 1 hour
    }, 3600000); // 1 hour in milliseconds
}

setLunchThenAvailable();


// 30m break
const stateSelectors = {
    Available: $('#ccp-state-Available'),
    Break: $('#ccp-state-Break'),
    Lunch: $('#ccp-state-Lunch'),
    Meeting: $('#ccp-state-Meeting'),
    Offline: $('#ccp-state-Offline')
};

function simulateClick(selector) {
    selector.click();
}

// Set current state to Break and schedule change to Available after 30 minutes
function setBreakThenAvailable() {
    simulateClick(stateSelectors.Break); // Set state to Break
    setTimeout(() => {
        simulateClick(stateSelectors.Available); // Change state to Available after 30 minutes
    }, 1800000); // 30 minutes in milliseconds
}


  setTimeout(() => {
     setBreakThenAvailable();
    }, 0 *0* 1000); 

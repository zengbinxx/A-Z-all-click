V1:

// 获取下拉菜单元素
var statusDropdown = document.getElementById('nautilus-gacd-status-dropdown');

// 检查是否找到了下拉菜单
if (statusDropdown) {
  // 设置值为'Available'的选项
  statusDropdown.value = 'Available';

  // 触发change事件以确保任何与此下拉菜单关联的事件处理程序被调用
  if (typeof(Event) === 'function') {
    var event = new Event('change', { 'bubbles': true, 'cancelable': true });
    statusDropdown.dispatchEvent(event);
  } else { // 为了兼容旧的浏览器
    var event = document.createEvent('Event');
    event.initEvent('change', true, true);
    statusDropdown.dispatchEvent(event);
  }
} else {
  console.log('Status dropdown not found.');
}




V2:

var statusDropdown = document.getElementById('nautilus-gacd-status-dropdown');

let s1 = "Available",
    s2 = "Break",
    s3 = "Lunch",
    s4 = "Meeting",
    s5 = "Offline";


setTimeout(async() => {
	if (statusDropdown) {
  
  		statusDropdown.value = s1;
		if (typeof(Event) === 'function') {
    			var event = new Event('change', { 'bubbles': true, 'cancelable': true });
    		statusDropdown.dispatchEvent(event);
  		} else { 
   			 var event = document.createEvent('Event');
   		 event.initEvent('change', true, true);
    		 statusDropdown.dispatchEvent(event);
  			}
		} else {
 		 console.log('Status dropdown not found.');
		}	
   }, 30*60*1000)



V2-1:

var statusDropdown = document.getElementById('nautilus-gacd-status-dropdown');

let s1 = "Available",
    s2 = "Break",
    s3 = "Lunch",
    s4 = "Meeting",
    s5 = "Offline";


setTimeout(async() => {
  		statusDropdown.value = s1;
    		var event = new Event('change', { 'bubbles': true, 'cancelable': true });
    		statusDropdown.dispatchEvent(event);
  		
   }, 30*60*1000)








V3:
var statusDropdown = document.getElementById('nautilus-gacd-status-dropdown');

let s1 = "Available",
    s2 = "Break",
    s3 = "Lunch",
    s4 = "Meeting",
    s5 = "Offline";

function NautilusTimeSet() {

    let current = new Date(),
        Hour = current.getHours(),
        Minute = current.getMinutes();

    switch (Hour) {
	 case 7:
            if (Minute >= 55 && Minute <= 59) {
                setTimeout(async() => {
                    statusDropdown.value = s1;
		    var event = new Event('change', { 'bubbles': true, 'cancelable': true });
    		statusDropdown.dispatchEvent(event);
                }, 50);
            };
            setTimeout(5*60*1000); 
            break;


        case 12:
            if (Minute >= 0 && Minute <= 5) {
                setTimeout(async() => {
                    statusDropdown.value = s3;
		    var event = new Event('change', { 'bubbles': true, 'cancelable': true });
    		statusDropdown.dispatchEvent(event);   
                }, 300);
            };
            break;

	case 13:
            if (Minute >= 0 && Minute <= 5) {
                setTimeout(async() => {
                    statusDropdown.value = s1;
		    var event = new Event('change', { 'bubbles': true, 'cancelable': true });
    		statusDropdown.dispatchEvent(event);   
                }, 300);
            };
            break;

        case 16:
            if (Minute >= 45 && Minute <= 50) {
                setTimeout(async() => {
                    statusDropdown.value = s4;
		    var event = new Event('change', { 'bubbles': true, 'cancelable': true });
    		statusDropdown.dispatchEvent(event);   
                }, 300);
            };
            break;


        case 17:
            if (Minute >= 0 && Minute <= 5) {
                setTimeout(async() => {
                   statusDropdown.value = s4;
		   var event = new Event('change', { 'bubbles': true, 'cancelable': true });
    		statusDropdown.dispatchEvent(event);   
                }, 300);
            };
            break;

        default:break;
    };
}

NautilusTimeSet() 

let SetTimeID = setInterval(NautilusTimeSet, 3*60*1000)

setTimeout(() => {
    clearInterval(SetTimeID);
}, 32400000)


Chatgpt4.0 v:
const statusDropdown = document.getElementById('nautilus-gacd-status-dropdown');

const statuses = {
  s1: "Available",
  s2: "Break",
  s3: "Lunch",
  s4: "Meeting",
  s5: "Offline"
};

function dispatchStatusChange(status) {
  if (statusDropdown) {
    statusDropdown.value = status;
    const event = new Event('change', { 'bubbles': true, 'cancelable': true });
    statusDropdown.dispatchEvent(event);
  }
}

function setStatusDuringTimeRange(hour, startMinute, endMinute, status, delay) {
  const current = new Date();
  const currentHour = current.getHours();
  const currentMinute = current.getMinutes();

  if (currentHour === hour && currentMinute >= startMinute && currentMinute <= endMinute) {
    setTimeout(() => dispatchStatusChange(status), delay);
  }
}

function NautilusTimeSet() {
  setStatusDuringTimeRange(7, 55, 59, statuses.s1, 50);
  setStatusDuringTimeRange(12, 0, 5, statuses.s3, 300);
  setStatusDuringTimeRange(13, 0, 5, statuses.s1, 300);
  setStatusDuringTimeRange(16, 45, 50, statuses.s4, 300);
  setStatusDuringTimeRange(17, 0, 5, statuses.s4, 300);
}

NautilusTimeSet();

const SetTimeID = setInterval(NautilusTimeSet, 3 * 60 * 1000);

setTimeout(() => {
  clearInterval(SetTimeID);
}, 32400000); // 9 hours


ChatGPT 4.0 V2:
const statusDropdown = document.getElementById('nautilus-gacd-status-dropdown');

const statuses = {
  s1: "Available",
  s2: "Break",
  s3: "Lunch",
  s4: "Meeting",
  s5: "Offline"
};

let isPaused = false;

function dispatchStatusChange(status) {
  if (statusDropdown) {
    statusDropdown.value = status;
    const event = new Event('change', { 'bubbles': true, 'cancelable': true });
    statusDropdown.dispatchEvent(event);
  }
}

// Add event listeners to the dropdown for s2 and s3 selections
if (statusDropdown) {
  statusDropdown.addEventListener('change', function() {
    if (statusDropdown.value === statuses.s3) {
      // Change back to s1 after 1 hour
      setTimeout(() => dispatchStatusChange(statuses.s1), 3600000);
    } else if (statusDropdown.value === statuses.s2) {
      // Change back to s1 after 30 minutes
      setTimeout(() => dispatchStatusChange(statuses.s1), 1800000);
    } else if (statusDropdown.value === statuses.s5) {
      // If status is s5, clear the interval and exit the script
      clearInterval(SetTimeID);
      console.log('Program exited because status is s5.');
      return;
    }
  });
}

function NautilusTimeSet() {
  const current = new Date();
  const currentHour = current.getHours();

  // Check if it's 8 AM and not paused
  if (currentHour === 8) {
    dispatchStatusChange(statuses.s1);
    isPaused = true;

    setTimeout(() => {
      isPaused = false;
    }, 3600000); // Resume after 1 hour
  }
  
  // Check if it's 5 PM
  else if (currentHour === 17) {
    dispatchStatusChange(statuses.s5);
    
  }
}

// Set an interval to check the time every minute
const SetTimeID = setInterval(NautilusTimeSet, 60000); // Check every minute

// Clear the interval after 9 hours (if needed)
// This might not be necessary depending on when you start the script
// and if you want it to run indefinitely or just during business hours
setTimeout(() => {
  clearInterval(SetTimeID);
}, 32400000); // 9 hours

